name: CI

on: [push, pull_request]

jobs:
  build:
    name: Building on ${{ matrix.os }} with ghc-${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            cabal: latest
            ghc: "9.2.5"
          # - os: macos-latest
          #   cabal: latest
          #   ghc: "8.10.7"
    steps:
    - uses: actions/checkout@v2
    - uses: haskell/actions/setup@v1
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - uses: conda-incubator/setup-miniconda@v2
      if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-latest'
      with:
        mamba-version: "*"
        miniforge-version: latest
        channels: conda-forge,defaults
        channel-priority: true
        auto-activate-base: false

    - name: Make Conda environment
      if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-latest'
      run: |
        mamba env create -f conda-ci-linux.yml
        mamba env list

    - name: Install GHC with -fPIC on Linux
      if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-latest'
      run: |
        source ~/.profile
        conda activate ci_devel
        ghcup rm ghc ${{ matrix.ghc }}
        echo $LD
        echo $CC
        ghcup install ghc \
          --url https://github.com/twesterhout/ghc-fpic-bindist/releases/download/v0.0.3/ghc-${{ matrix.ghc }}-x86_64-linux-ubuntu-18.04.tar.xz \
          ${{ matrix.ghc }}
        # cat /usr/local/.ghcup/logs/ghcup.log
    - uses: actions/cache@v3
      name: Cache ~/.cabal/store
      with:
        path: ~/.cabal/store
        key: ${{ runner.os }}-${{ matrix.ghc }}-cabal
    # - name: Install system dependencies (Linux)
    #   if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-latest'
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y --no-install-recommends libnuma-dev libgmp-dev

    - name: Build
      run: |
        source ~/.profile
        conda activate ci_devel
        echo $LD
        echo $CC
        make CONDA_CC=$CC CONDA_PREFIX=$CONDA_PREFIX cabal.project.local
        cat cabal.project.local
        make CONDA_CC=$CC CONDA_PREFIX=$CONDA_PREFIX haskell

    # - name: Test
    #   run: |
    #     source ~/.profile
    #     conda activate ci_devel
    #     cabal run ising-ground-state

    - name: Package
      run: |
        source ~/.profile
        conda activate ci_devel
        mkdir $GITHUB_WORKSPACE/conda_output
        mamba build -c conda-forge --output-folder=$GITHUB_WORKSPACE/conda_output python/conda/
    
    - uses: actions/upload-artifact@v3
      with:
        name: conda-packages-linux
        path: conda_output/*

  release:
    name: Creating a release
    needs: [build]
    runs-on: ubuntu-20.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Inspect directory after downloading artifacts
        run: |
          ls -alFR
      - name: Create release and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
          chmod +x pyuploadtool-x86_64.AppImage
          ./pyuploadtool-x86_64.AppImage conda-packages-linux/linux-64/ising-glass-annealer-*.tar.bz2
