name: CI

on: [push, pull_request]

jobs:
  build:
    name: Building on ${{ matrix.os }} with ghc-${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            cabal: latest
            ghc: "9.2.5"
          # - os: macos-latest
          #   cabal: latest
          #   ghc: "8.10.7"
    steps:
    - uses: actions/checkout@v2
    - uses: haskell/actions/setup@v1
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libnuma-dev libgmp-dev

    - name: Install GHC with -fPIC on Linux
      if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-latest'
      run: |
        ghcup rm ghc ${{ matrix.ghc }}
        rm -r ~/.cabal/store
        ghcup install ghc \
          --url https://github.com/twesterhout/ghc-fpic-bindist/releases/download/v0.0.3/ghc-${{ matrix.ghc }}-x86_64-linux-ubuntu-18.04.tar.xz \
          ${{ matrix.ghc }}
    - uses: actions/cache@v3
      name: Cache ~/.cabal/store
      with:
        path: ~/.cabal/store
        key: ${{ runner.os }}-${{ matrix.ghc }}-cabal

    - uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: conda-ci-linux.yml
          auto-activate-base: false

    # - uses: conda-incubator/setup-miniconda@v2
    #   if: matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-latest'
    #   with:
    #     mamba-version: "*"
    #     miniforge-version: latest
    #     channels: conda-forge,defaults
    #     channel-priority: true
    #     auto-activate-base: false

    - name: Check Conda environments
      shell: bash -el {0}
      run: |
        conda info
        conda env list
        echo "CONDA_CC=$CONDA_CC"
        echo "CONDA_PREFIX=$CONDA_PREFIX"

    - name: Build
      shell: bash -el {0}
      run: |
        CONDA_CC=$(conda run -n test bash -c "which \${CC}")
        CONDA_PREFIX=$(micromamba run -n test bash -c "which \${CONDA_PREFIX}")
        
        make CONDA_CC=$CONDA_CC CONDA_PREFIX=$CONDA_PREFIX cabal.project.local
        cat cabal.project.local
        make CONDA_CC=$CC CONDA_PREFIX=$CONDA_PREFIX haskell

    # - name: Test
    #   run: |
    #     source ~/.profile
    #     conda activate ci_devel
    #     cabal run ising-ground-state

    - name: Package
      shell: bash -el {0}
      run: |
        mkdir $GITHUB_WORKSPACE/conda_output
        conda activate test
        conda build --output-folder=$GITHUB_WORKSPACE/conda_output python/conda/
    
    - uses: actions/upload-artifact@v3
      with:
        name: conda-packages-linux
        path: conda_output/*

  release:
    name: Creating a release
    needs: [build]
    runs-on: ubuntu-20.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Inspect directory after downloading artifacts
        run: |
          ls -alFR
      - name: Create release and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
          chmod +x pyuploadtool-x86_64.AppImage
          ./pyuploadtool-x86_64.AppImage conda-packages-linux/linux-64/ising-glass-annealer-*.tar.bz2
